/*
 README
 이 코드는 원본이미지(RGB)의 R,G,B 각각에 대해서 독립적으로 histogram equalization을 실행한다. 결과로 distortion이 생긴 이미지가 출력된다. R,G,B는 서로 완전한 독립적인 random variable이 아니기 때문에 발생하는 오류인다.
 
 input: input이미지(RGB)
 output: PDF_RGB.txt, equalized_PDF_RGB.txt, trans_func_eq_RGB.txt, input이미지(RGB), equalized(RGB)이미지

 
 */

#include "hist_func.h"

void hist_eq_Color(Mat &input, Mat &equalized, G(*trans_func)[3], float **CDF);


int main() {

	Mat input = imread("input.jpg",IMREAD_UNCHANGED);   //원본이미지(RGB)
	Mat equalized_RGB = input.clone(); // 이미지 복제

	// PDF or transfer function txt files
	FILE *f_equalized_PDF_RGB, *f_PDF_RGB;
	FILE *f_trans_func_eq_RGB;
	
	f_PDF_RGB=fopen( "PDF_RGB.txt", "w+");
	f_equalized_PDF_RGB= fopen( "equalized_PDF_RGB.txt", "w+");
	f_trans_func_eq_RGB=fopen( "trans_func_eq_RGB.txt", "w+");

	float **PDF_RGB = cal_PDF_RGB(input);	// PDF of Input image(RGB) : [L][3]
	float **CDF_RGB = cal_CDF_RGB(input);	// CDF of Input image(RGB) : [L][3]
    
	G trans_func_eq_RGB[L][3] = { 0 };		// transfer function

	// histogram equalization on RGB image
    hist_eq_Color(input,equalized_RGB,trans_func_eq_RGB,CDF_RGB);
   
	// equalized PDF (RGB)
    float **equalized_PDF_RGB = cal_PDF_RGB(equalized_RGB); // PDF of equalized image(RGB) : [L][3]

    
	for (int i = 0; i < L; i++) {
        for(int j=0;j<3;j++)
        {
            fprintf(f_PDF_RGB, "%d\t%f\n", i, PDF_RGB[i][j]); //원본이미지(RGB) hist
            fprintf(f_equalized_PDF_RGB, "%d\t%f\n", i, equalized_PDF_RGB[i][j]); //원본이미지(RGB) hist
            fprintf(f_trans_func_eq_RGB, "%d\t%d\n", i, trans_func_eq_RGB[i][j]); //transfrom function
           
        }
       
       
      
	}

	// memory release
	free(PDF_RGB);
	free(CDF_RGB);
	fclose(f_PDF_RGB);
	fclose(f_equalized_PDF_RGB);
	fclose(f_trans_func_eq_RGB);

	////////////////////// Show each image ///////////////////////

	namedWindow("RGB", WINDOW_AUTOSIZE);
	imshow("RGB", input);     // 원본이지미(RGB) 출력

	namedWindow("Equalized_RGB", WINDOW_AUTOSIZE);
	imshow("Equalized_RGB", equalized_RGB);   //equalized된 이미지 출력
 
	//////////////////////////////////////////////////////////////

	waitKey(0);

	return 0;
}

// histogram equalization on 3 channel image
void hist_eq_Color(Mat &input, Mat &equalized_RGB, G(*trans_func)[3], float **CDF) {
    int k=0;
    for(int i=0; i<L;i++)
        for(int j=0;j<3;j++)
        {
             trans_func[i][j]=(G)((L - 1) * CDF[i][j]);
        }
       
	// multi channel matrix element. (R,G,B)
    for (int i = 0; i < input.rows; i++)
    {
        for (int j = 0; j < input.cols; j++)
          {
              equalized_RGB.at<Vec3b>(i, j)[0] = trans_func[input.at<Vec3b>(i, j)[0]][0];
              equalized_RGB.at<Vec3b>(i, j)[1] = trans_func[input.at<Vec3b>(i, j)[1]][1];
              equalized_RGB.at<Vec3b>(i, j)[2] = trans_func[input.at<Vec3b>(i, j)[2]][2];
             
          }
        k++;

        
    }
  
        
}



