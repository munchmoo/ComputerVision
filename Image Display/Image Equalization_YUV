/*
 README.txt
 이 코드는 RGB이미지를 YUV로 채널을 분리해서 Y채널에 대해서만 histogram equalization을 실행한다.
 결과로 올바른 RGB이미지의 histogram equalization이 진행된 이미지가 출력된다.
 
 input: input이미지(RGB)
 output: PDF_RGB.txt, equalized_PDF_RGB.txt, trans_func_eq_RGB.txt, input이미지(RGB), equalizedYUV이미지
*/

#include "hist_func.h"

void hist_eq(Mat &input, Mat &equalized, G *trans_func, float *CDF);

int main() {

	Mat input = imread("input.jpg", IMREAD_UNCHANGED);   //원본이미지 (RGB)읽기
	Mat equalized_YUV;  // YUV이미지
    Mat out;
	cvtColor(input, equalized_YUV, COLOR_RGB2YUV);	// RGB -> YUV
	// split each channel(Y, U, V)
    // Y=밝기, U=색상1, V=색상2
    
	Mat channels[3];
    
	split(equalized_YUV, channels); // 채널 나누기
    //The function cv::split splits a multi-channel array into separate single-channel arrays:
	Mat Y = channels[0];   // U = channels[1], V = channels[2]
   //밝기에 대한 single-channel
    
	// PDF or transfer function txt files
	FILE *f_equalized_PDF_YUV, *f_PDF_RGB;
	FILE *f_trans_func_eq_YUV;

	float **PDF_RGB = cal_PDF_RGB(input);		// PDF of Input image(RGB) : [L][3]
	float *CDF_YUV = cal_CDF(Y);				// CDF of Y channel image

	f_PDF_RGB= fopen("PDF_RGB.txt", "w+");
	f_equalized_PDF_YUV= fopen( "equalized_PDF_YUV.txt", "w+");
	f_trans_func_eq_YUV=fopen( "trans_func_eq_YUV.txt", "w+");

	G trans_func_eq_YUV[L] = { 0 };	// transfer function


    hist_eq(Y, Y, trans_func_eq_YUV, CDF_YUV); // histogram equalization on Y channel

    merge(channels, 3, equalized_YUV); // merge Y, U, V channels
   
    cvtColor( equalized_YUV,out, COLOR_YUV2RGB); // YUV ->  RGB
	
    float *equalized_PDF=cal_PDF(equalized_YUV); // equalized PDF (YUV)
	

	for (int i = 0; i < L; i++) {
        for(int j=0;j<3;j++)
        {
            fprintf(f_PDF_RGB, "%d\t%f\n", i, PDF_RGB[i][j]); // PDF of equalized image(YUB)
        }
         fprintf(f_equalized_PDF_YUV, "%d\t%f\n", i, equalized_PDF[i]); // PDF of equalized image(YUB)
		 fprintf(f_trans_func_eq_YUV, "%d\t%d\n", i, trans_func_eq_YUV[i]); //transfrom function
	}

	// memory release
	free(PDF_RGB);
	free(CDF_YUV);
	fclose(f_PDF_RGB);
	fclose(f_equalized_PDF_YUV);
	fclose(f_trans_func_eq_YUV);

	////////////////////// Show each image ///////////////////////

	namedWindow("RGB", WINDOW_AUTOSIZE);
	imshow("RGB", input);

	namedWindow("Equalized_YUV", WINDOW_AUTOSIZE);
	imshow("Equalized_YUV", out);

	//////////////////////////////////////////////////////////////

	waitKey(0);

	return 0;
}

// histogram equalization Y채널에 대해서만 실행한다.
void hist_eq(Mat &input, Mat &equalized_YUV, G *trans_func, float *CDF) {

	// compute transfer function
	for (int i = 0; i < L; i++)
		trans_func[i] = (G)((L - 1) * CDF[i]);   //s=T(r) 계산

	// perform the transfer function
	for (int i = 0; i < input.rows; i++)
		for (int j = 0; j < input.cols; j++)
			equalized_YUV.at<G>(i, j) = trans_func[input.at<G>(i, j)];
    
    
   
}



